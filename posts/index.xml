<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Redjen TIL</title>
        <link>http://redjen8.github.io/posts/</link>
        <description>All Posts | Redjen TIL</description>
        <generator>Hugo -- gohugo.io</generator><language>ko-KR</language><lastBuildDate>Fri, 23 Feb 2024 21:11:45 &#43;0900</lastBuildDate><atom:link href="http://redjen8.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>타입스크립트 핸드북 16장 - 인덱스 타입</title>
    <link>http://redjen8.github.io/posts/ts-handbook/conditional-types/</link>
    <pubDate>Fri, 23 Feb 2024 21:11:45 &#43;0900</pubDate>
    <author>redjen</author>
    <guid>http://redjen8.github.io/posts/ts-handbook/conditional-types/</guid>
    <description><![CDATA[https://typescript-kr.github.io/pages/advanced-types.html#%EC%A1%B0%EA%B1%B4%EB%B6%80-%ED%83%80%EC%9E%85-conditional-types T extends U ? X : Y T가 U에 할당될 수 있다면 X 타입이 된다. T가 U에 할당 불가능한 경우 Y 타입이 된다. 조건부 타입은 다음의 특징을 가진다. 타입이 X 또는 Y로 결]]></description>
</item>
<item>
    <title>타입스크립트 핸드북 15장 - 매핑 타입</title>
    <link>http://redjen8.github.io/posts/ts-handbook/mapping-types/</link>
    <pubDate>Wed, 21 Feb 2024 20:49:40 &#43;0900</pubDate>
    <author>redjen</author>
    <guid>http://redjen8.github.io/posts/ts-handbook/mapping-types/</guid>
    <description><![CDATA[https://typescript-kr.github.io/pages/advanced-types.html#%EB%A7%A4%ED%95%91-%ED%83%80%EC%9E%85-mapped-types 기존 타입을 &lsquo;매핑&rsquo; 하여 각 프로퍼티를 변환한 신규 타입을 만드는 방법 type Readonly&lt;T&gt; = { readonly [P in keyof T]: T[P]; } type Partial&lt;T&gt; = { [P in keyof T]?: T[P]; } type PersonPartial = Partial&lt;Person&gt;; type readonlyPerson]]></description>
</item>
<item>
    <title>타입스크립트 핸드북 14장 - 인덱스 타입</title>
    <link>http://redjen8.github.io/posts/ts-handbook/index-types/</link>
    <pubDate>Tue, 20 Feb 2024 23:53:02 &#43;0900</pubDate>
    <author>redjen</author>
    <guid>http://redjen8.github.io/posts/ts-handbook/index-types/</guid>
    <description><![CDATA[https://typescript-kr.github.io/pages/advanced-types.html#%EC%9D%B8%EB%8D%B1%EC%8A%A4-%ED%83%80%EC%9E%85-index-types 동적인 프로퍼티 이름을 사용하는 코드를 컴파일러가 알게 하고 싶은 경우 function pluck&lt;T, K extends keyof T&gt;(o: T, propertyNames: K[]): T[K][] { return propertyNames.map(n =&gt; o[n]); } interface Car { manufacturer: string; model: string; year: number; } let taxi: Car = { manufacturer: &#39;Toyota&#39;, model: &#39;Camry&#39;, year: 2014 }; //]]></description>
</item>
<item>
    <title>타입스크립트 핸드북 13장 - 다형성 this 타입</title>
    <link>http://redjen8.github.io/posts/ts-handbook/polymorphic-this-types/</link>
    <pubDate>Tue, 13 Feb 2024 22:21:31 &#43;0900</pubDate>
    <author>redjen</author>
    <guid>http://redjen8.github.io/posts/ts-handbook/polymorphic-this-types/</guid>
    <description><![CDATA[https://typescript-kr.github.io/pages/advanced-types.html#%EB%8B%A4%ED%98%95%EC%84%B1-this-%ED%83%80%EC%9E%85-polymorphic-this-types class BasicCalculator { public constructor(protected value: number = 0) { } public currentValue(): number { return this.value; } public add(operand: number): this { this.value += operand; return this; } public multiply(operand: number): this { this.value *= operand; return this; } // ... 다른 연산들은 여기에 작성 ... } let v = new BasicCalculator(2) .multiply(5) .add(1) .currentValue(); class ScientificCalculator extends BasicCalculator { public]]></description>
</item>
<item>
    <title>타입스크립트 12장 - 판별 유니온</title>
    <link>http://redjen8.github.io/posts/ts-handbook/discriminated-unions/</link>
    <pubDate>Tue, 13 Feb 2024 21:58:17 &#43;0900</pubDate>
    <author>redjen</author>
    <guid>http://redjen8.github.io/posts/ts-handbook/discriminated-unions/</guid>
    <description><![CDATA[https://typescript-kr.github.io/pages/advanced-types.html#%ED%8C%90%EB%B3%84-%EC%9C%A0%EB%8B%88%EC%96%B8-discriminated-unions 싱글톤 패턴 + 유니언 타입 + 타입 가드 + type alias의 짬뽕 아래의 3가지 요소로 구성된다. 공통 싱글톤 타입 프로퍼티를 가지는 타입 해당 타입들의 유니언으로써]]></description>
</item>
<item>
    <title>타입스크립트 핸드북 11장 - 널러블 타입</title>
    <link>http://redjen8.github.io/posts/ts-handbook/nullable-types/</link>
    <pubDate>Wed, 31 Jan 2024 20:18:09 &#43;0900</pubDate>
    <author>redjen</author>
    <guid>http://redjen8.github.io/posts/ts-handbook/nullable-types/</guid>
    <description><![CDATA[https://typescript-kr.github.io/pages/advanced-types.html#%EB%84%90%EB%9F%AC%EB%B8%94-%ED%83%80%EC%9E%85-nullable-types Nullable Types null과 undefined는 아무 것에나 할당 가능하다. 이를 방지하기 위한 tsconfig 플래그 값이 --strictNullChecks TS 3.7 이후부터는 optional chaining을 사용할 수 있다. 타]]></description>
</item>
<item>
    <title>타입스크립트 핸드북 10장 - 타입 가드와 차별 타입</title>
    <link>http://redjen8.github.io/posts/ts-handbook/type-guards-and-differentiating-types/</link>
    <pubDate>Wed, 31 Jan 2024 19:45:26 &#43;0900</pubDate>
    <author>redjen</author>
    <guid>http://redjen8.github.io/posts/ts-handbook/type-guards-and-differentiating-types/</guid>
    <description><![CDATA[https://typescript-kr.github.io/pages/advanced-types.html#%ED%83%80%EC%9E%85-%EA%B0%80%EB%93%9C%EC%99%80-%EC%B0%A8%EB%B3%84-%ED%83%80%EC%9E%85-type-guards-and-differentiating-types 유니언 타입: 타입들을 겹치는 상황에서 사용, 하지만 한 타입이 명시적으로 존재하는지 구체적으로 알고 싶다면? let pet = getSmallPet(); if (pet.swim) { pet.swim(); } else if (pet.fly) { pet.fly(); } 위 코드는 아래]]></description>
</item>
<item>
    <title>타입스크립트 핸드북 9장 - (고급 타입) 교차 타입, 유니언 타입</title>
    <link>http://redjen8.github.io/posts/ts-handbook/advanced-union-type-and-intersection-type/</link>
    <pubDate>Wed, 24 Jan 2024 19:19:27 &#43;0900</pubDate>
    <author>redjen</author>
    <guid>http://redjen8.github.io/posts/ts-handbook/advanced-union-type-and-intersection-type/</guid>
    <description><![CDATA[교차 타입 https://typescript-kr.github.io/pages/advanced-types.html#%EA%B5%90%EC%B0%A8-%ED%83%80%EC%9E%85-intersection-types 여러 타입을 하나로 결합한 타입. 즉 기존의 타입들을 하나로 합쳐 필요한 모든 기능을 가진 하나의 타입을 얻을 수 있다. 믹스인이란 https://en.wikipedia.org/wiki/Mixin 객체 지향 프로그래밍에]]></description>
</item>
<item>
    <title>타입스크립트 핸드북 8장 - 제네릭</title>
    <link>http://redjen8.github.io/posts/ts-handbook/generic/</link>
    <pubDate>Wed, 10 Jan 2024 22:00:00 &#43;0900</pubDate>
    <author>redjen</author>
    <guid>http://redjen8.github.io/posts/ts-handbook/generic/</guid>
    <description><![CDATA[https://typescript-kr.github.io/pages/generics.html 재사용 가능한 컴포넌트를 생성하는 하나의 유용한 방법 제네릭 처음 접하기 function identity(arg: number): number { return arg; } number 말고도 다른 타입을 인자로 받는 함수를 만들고 싶어~ function identity(arg: any): any { return arg;]]></description>
</item>
<item>
    <title>타입스크립트 핸드북 5장 - 유니언과 교차 타입</title>
    <link>http://redjen8.github.io/posts/ts-handbook/union-and-intersection/</link>
    <pubDate>Wed, 10 Jan 2024 21:58:47 &#43;0900</pubDate>
    <author>redjen</author>
    <guid>http://redjen8.github.io/posts/ts-handbook/union-and-intersection/</guid>
    <description><![CDATA[https://typescript-kr.github.io/pages/unions-and-intersections.html Union Types any를 사용하기 보단 예상되는 타입의 개수를 줄인다 function padLeft(value: string, padding: string | number) { // ... } let indentedString = padLeft(&#34;Hello world&#34;, true); | 로 타입을 구분 number | string | boolean은 값 타입이 number, string, boolean 중]]></description>
</item>
</channel>
</rss>
